// 5.0/5.1 -- API level 21/API level 22
// 6.0 -- API level 23
// 7.0 -- API level 24
// 7.1 -- API level 25
// 8.0 -- API level 26
// 8.1 -- API level 27
// 9.0 -- API level 28
android {
    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        checkReleaseBuilds false
    }
    // packagingOptions {
    //     // specify the path to your object binaries, or generally:
    //     doNotStrip '**.so'
    // }
    defaultConfig {
        // above android5
        minSdkVersion 21
        targetSdkVersion 28
        externalNativeBuild {
            // version "3.10.2"
            cmake {                
                cppFlags "-fexceptions -frtti"
                arguments '-DANDROID_PLATFORM=android-21', "-DANDROID_TOOLCHAIN=clang", "-DANDROID_STL=c++_shared"
            }
        }
        ndk {
            // "armeabi-v7a", "arm64-v8a"
            // drop support 32bit
            // abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }
    splits {
        // Configures multiple APKs based on ABI.
        abi {
            // Enables building multiple APKs per ABI.
            enable true
            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.
            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()
            // Specifies a list of ABIs that Gradle should create APKs for.
            include "armeabi-v7a", "arm64-v8a"
            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    lintOptions {
        abortOnError false
    }
}

project.afterEvaluate {
    // Not sure how much of a hack this is - but it allows CMake/SWIG to run before Android Studio
    // complains about missing generated files
    // TODO: Probably need a release hook too?
    javaPreCompileDebug.dependsOn externalNativeBuildDebug
    javaPreCompileRelease.dependsOn externalNativeBuildRelease
}

buildscript {
    repositories {
        mavenCentral()
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.0'
    }
}
// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a':0, "arm64-v8a":1]
import com.android.build.OutputFile
android.applicationVariants.all { variant ->
  // Assigns a different version code for each output APK
  // other than the universal APK.
  variant.outputs.each { output ->
    if(project.hasProperty('aabBundle')) {
        println "cdvVersionCode=" + cdvVersionCode
        return;
    }
    project.logger.lifecycle('------------------------gradle-------------------------------')
    // println output.getOutputType()
    // println output.getFilter(OutputFile.ABI)
    // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
    def baseAbiVersionCode =
            // Determines the ABI for this variant and returns the mapped value.
            project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

    // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
    // the following code does not override the version code for universal APKs.
    // However, because we want universal APKs to have the lowest version code,
    // this outcome is desirable.
    if (baseAbiVersionCode != null) {
      // Assigns the new version code to versionCodeOverride, which changes the version code
      // for only the output APK, not for the variant itself. Skipping this step simply
      // causes Gradle to use the value of variant.versionCode for the APK.
      output.versionCodeOverride = variant.versionCode * 100 + baseAbiVersionCode
      println "output.versionCodeOverride=" + output.versionCodeOverride
    }
  }
}
// The greatest value Google Play allows for versionCode is 2100000000.
// aapt dump badging dist/app-arm64-v8a-release.apk | grep "package:"
// aapt dump badging dist/app-armeabi-v7a-release.apk | grep "package:"